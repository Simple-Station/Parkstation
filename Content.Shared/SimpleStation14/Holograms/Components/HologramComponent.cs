using Robust.Shared.Serialization.TypeSerializers.Implementations;

namespace Content.Shared.SimpleStation14.Holograms;

[RegisterComponent]
public sealed class HologramComponent : Component
{
    /// <summary>
    ///     The type of hologram this is.
    /// </summary>
    /// <remarks>
    ///     See <see cref="HoloTypeEnum"/> for possible values.
    [DataField("holoType", customTypeSerializer: typeof(EnumSerializer))]
    public Enum HoloType = HoloTypeEnum.Projected;

    /// <summary>
    ///     Is this a hardlight Hologram.
    /// </summary>
    [DataField("isHardlight")]
    public bool IsHardlight = false;

    /// <summary>
    ///     The server that this hologram is generated by.
    /// </summary>
    /// <remarks>
    ///     This will be the lightbee if it's a lightbee hologram.
    /// </remarks>
    [ViewVariables(VVAccess.ReadOnly)]
    public EntityUid? LinkedServer;

    /// <summary>
    ///    The current projector the hologram is connected to.
    /// </summary>
    /// <remarks>
    ///    This will be the lightbee if it's a lightbee hologram.
    /// </remarks>
    [ViewVariables(VVAccess.ReadOnly)]
    public EntityUid? CurProjector;

    /// <summary>
    ///     A timer for a grace period before the Holo is returned, to allow for moving through doors.
    /// </summary>
    public float GracePeriod = 0.5f;
}
