using Content.Shared.Damage;
using Content.Shared.Damage.Prototypes;
using Content.Shared.Disease.Components;
using Content.Shared.FixedPoint;
using Content.Shared.IdentityManagement;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;
using System.Text;
using static Content.Shared.MedicalScanner.SharedHealthAnalyzerComponent;
using static Robust.Client.UserInterface.Controls.BoxContainer;

namespace Content.Client.HealthAnalyzer.UI
{
    [GenerateTypedNameReferences]
    public sealed partial class HealthAnalyzerWindow : DefaultWindow
    {
        public HealthAnalyzerWindow()
        {
            RobustXamlLoader.Load(this);
        }

        public void Populate(HealthAnalyzerScannedUserMessage msg)
        {
            var entities = IoCManager.Resolve<IEntityManager>();

            if (msg.TargetEntity != null && entities.TryGetComponent<DamageableComponent>(msg.TargetEntity, out var damageable))
            {
                string entityName = "Unknown";
                if (msg.TargetEntity != null && entities.TryGetComponent<MetaDataComponent>(msg.TargetEntity.Value, out var metaData))
                    entityName = Identity.Name(msg.TargetEntity.Value, entities);

                Diagnostics.Text = $"{Loc.GetString("health-analyzer-window-entity-health-text", ("entityName", entityName))}";

                IReadOnlyDictionary<string, FixedPoint2> DamagePerGroup = damageable.DamagePerGroup;
                IReadOnlyDictionary<string, FixedPoint2> DamagePerType = damageable.Damage.DamageDict;
                HashSet<string> shownTypes = new();

                if (entities.HasComponent<DiseasedComponent>(msg.TargetEntity))
                {
                    DiagnosticsBox.AddChild(new Label
                    {
                        HorizontalAlignment = HAlignment.Center,
                        Text = $"{Loc.GetString("disease-scanner-diseased")}"
                    });
                }
                else
                {
                    DiagnosticsBox.AddChild(new Label
                    {
                        HorizontalAlignment = HAlignment.Center,
                        Text = $"{Loc.GetString("disease-scanner-not-diseased")}"
                    });
                }

                DamageBox.AddChild(new Label
                {
                    HorizontalAlignment = HAlignment.Center,
                    Text = $"{Loc.GetString("health-analyzer-window-entity-damage-total-text", ("amount", damageable.TotalDamage))}"
                });

                var protos = IoCManager.Resolve<IPrototypeManager>();

                foreach (var (damageGroupId, damageAmount) in DamagePerGroup)
                {
                    var damageBox = new BoxContainer
                    {
                        Orientation = LayoutOrientation.Vertical,
                        HorizontalAlignment = HAlignment.Center,
                        Margin = new Thickness(6, 12, 6, 12)
                    };
                    DamageGrid.AddChild(damageBox);

                    damageBox.AddChild(new Label
                    {
                        HorizontalAlignment = HAlignment.Center,
                        Text = $"-  {Loc.GetString("health-analyzer-window-damage-group-text", ("damageGroup", Loc.GetString("health-analyzer-window-damage-group-" + damageGroupId)), ("amount", damageAmount))}  -"
                    });

                    var group = protos.Index<DamageGroupPrototype>(damageGroupId);
                    foreach (var type in group.DamageTypes)
                    {
                        if (DamagePerType.TryGetValue(type, out var amount))
                        {
                            damageBox.AddChild(new Label
                            {
                                HorizontalAlignment = HAlignment.Center,
                                Text = $"{Loc.GetString("health-analyzer-window-damage-type-text", ("damageType", Loc.GetString("health-analyzer-window-damage-type-" + type)), ("amount", amount))}"
                            });
                            shownTypes.Add(type);
                        }
                    }
                }
            }
            else
            {
                Diagnostics.Text = Loc.GetString("health-analyzer-window-no-patient-data-text");
                SetSize = (250, 100);
            }
        }
    }
}
