using System.Linq;
using Content.Shared.Administration;
using Content.Shared.SimpleStation14.Announcements.Prototypes;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;

namespace Content.Client.Administration.UI
{
    [GenerateTypedNameReferences]
    public sealed partial class AdminAnnounceWindow : DefaultWindow
    {
        [Dependency] private readonly ILocalizationManager _localization = default!;
        [Dependency] private readonly IPrototypeManager _prototype = default!;
        private readonly List<string> _reasons = new List<string>();
        private bool _voice = false;
        private bool _announcer = false;
        private bool _text = false;

        public AdminAnnounceWindow()
        {
            RobustXamlLoader.Load(this);
            IoCManager.InjectDependencies(this);

            AnnounceMethod.AddItem(_localization.GetString("admin-announce-type-station"));
            AnnounceMethod.SetItemMetadata(0, AdminAnnounceType.Station);
            AnnounceMethod.AddItem(_localization.GetString("admin-announce-type-server"));
            AnnounceMethod.SetItemMetadata(1, AdminAnnounceType.Server);
            AnnounceMethod.OnItemSelected += AnnounceMethodOnOnItemSelected;
            Announcement.OnTextChanged += AnnouncementOnOnTextChanged;

            AnnouncerVoice.OnTextChanged += AnnouncerVoiceOnOnTextChanged;
            AnnouncerVoice.PlaceHolder = "Intern";
            AnnouncerType.OnTextChanged += AnnouncerTypeOnOnTextChanged;
            AnnouncerType.PlaceHolder = "commandreport";
        }


        private void AnnouncementOnOnTextChanged(LineEdit.LineEditEventArgs args)
        {
            _reasons.Remove(Loc.GetString("admin-announce-reason-empty-text"));

            _text = !string.IsNullOrEmpty(args.Text.Trim());

            if (!_text)
            {
                _reasons.Add(Loc.GetString("admin-announce-reason-empty-text"));
            }

            AnnounceButton.Disabled = !_voice || !_announcer || !_text;
            AnnouncerValid.Text = string.Join(", ", _reasons);
        }

        private void AnnounceMethodOnOnItemSelected(OptionButton.ItemSelectedEventArgs args)
        {
            AnnounceMethod.SelectId(args.Id);
            // True if selected item is station
            var edit = ((AdminAnnounceType?) args.Button.SelectedMetadata ?? AdminAnnounceType.Station) ==
                       AdminAnnounceType.Station;

            Announcer.Editable = edit;
            AnnouncerType.Editable = edit;
            AnnouncerVoice.Editable = edit;
        }

        private void AnnouncerVoiceOnOnTextChanged(LineEdit.LineEditEventArgs args)
        {
            _reasons.Remove(Loc.GetString("admin-announce-reason-empty-announcer"));
            _reasons.Remove(Loc.GetString("admin-announce-reason-invalid-announcer"));
            AnnouncerVoice.Editable = true;
            _voice = true;

            if (string.IsNullOrEmpty(args.Text.Trim()))
            {
                _voice = false;
                _reasons.Add(Loc.GetString("admin-announce-reason-empty-announcer"));
            }
            else if (!_prototype.TryIndex(args.Text.Trim(), out AnnouncerPrototype? prototype))
            {
                _voice = false;
                _reasons.Add(Loc.GetString("admin-announce-reason-invalid-announcer"));
            }

            AnnounceButton.Disabled = !_voice || !_announcer || !_text;
            AnnouncerValid.Text = string.Join(", ", _reasons);
        }

        private void AnnouncerTypeOnOnTextChanged(LineEdit.LineEditEventArgs args)
        {
            _reasons.Remove(Loc.GetString("admin-announce-reason-empty-announcement-type"));
            _reasons.Remove(Loc.GetString("admin-announce-reason-invalid-announcement-type"));
            AnnouncerType.Editable = true;
            _announcer = true;

            if (string.IsNullOrEmpty(args.Text.Trim()))
            {
                _announcer = false;
                _reasons.Add(Loc.GetString("admin-announce-reason-empty-announcement-type"));
            }
            else if (_prototype.EnumeratePrototypes<AnnouncerPrototype>().SelectMany(x => x.AnnouncementPaths).All(x => x.ID != args.Text.Trim()))
            {
                _announcer = false;
                _reasons.Add(Loc.GetString("admin-announce-reason-invalid-announcement-type"));
            }

            AnnounceButton.Disabled = !_voice || !_announcer || !_text;
            AnnouncerValid.Text = string.Join(", ", _reasons);
        }
    }
}
