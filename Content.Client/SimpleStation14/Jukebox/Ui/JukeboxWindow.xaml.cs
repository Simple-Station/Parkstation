using Content.Client.Message;
using Content.Shared.SimpleStation14.Jukebox;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Shared.Prototypes;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Timing;
using FancyWindow = Content.Client.UserInterface.Controls.FancyWindow;
using Content.Shared.SimpleStation14.Prototypes;
using System.Linq;
using Robust.Client.Graphics;

namespace Content.Client.SimpleStation14.Jukebox.Ui;

[GenerateTypedNameReferences]
public sealed partial class JukeboxWindow : FancyWindow
{
    [Dependency] private readonly IGameTiming _timing = default!;
    [Dependency] private readonly IPrototypeManager _prototype = default!;

    private readonly JukeboxBoundUserInterface _bui;

    private readonly JukeboxComponent _jukeboxComp;

    private TimeSpan _timeWillFinish = TimeSpan.Zero;

    private TimeSpan _timeStopped = TimeSpan.Zero;

    private TimeSpan _songDuration = TimeSpan.Zero;

    public Action? OnPlayButtonPressed;

    public Action? OnSkipButtonPressed;

    public Action<string>? OnSongSelected;


    public JukeboxWindow(JukeboxBoundUserInterface bui, JukeboxComponent jukeboxComp)
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        _bui = bui;
        _jukeboxComp = jukeboxComp;

        PlayButton.OnPressed += _ => OnPlayButtonPressed?.Invoke();

        SkipButton.OnPressed += _ => OnSkipButtonPressed?.Invoke();

        BG_1.PanelOverride = new StyleBoxFlat { BackgroundColor = Color.FromHex(jukeboxComp.JukeboxBG) };
        Panel_1.PanelOverride = new StyleBoxFlat { BackgroundColor = Color.FromHex(jukeboxComp.JukeboxPanel) };
        Panel_2.PanelOverride = new StyleBoxFlat { BackgroundColor = Color.FromHex(jukeboxComp.JukeboxPanel) };
        Accent_1.PanelOverride = new StyleBoxFlat { BackgroundColor = Color.FromHex(jukeboxComp.JukeboxAccent) };
        Accent_2.PanelOverride = new StyleBoxFlat { BackgroundColor = Color.FromHex(jukeboxComp.JukeboxAccent) };
        Accent_3.PanelOverride = new StyleBoxFlat { BackgroundColor = Color.FromHex(jukeboxComp.JukeboxAccent) };

        UpdateState(true);
    }

    protected override void FrameUpdate(FrameEventArgs args)
    {
        base.FrameUpdate(args);

        if (_jukeboxComp.CurrentlyPlayingTrack == null)
        {
            RunTimeBar.Value = 0f;

            return;
        }

        if (_jukeboxComp.Playing)
        {
            RunTimeBar.Value = (float) ((float)
                (_songDuration.TotalSeconds - (_timeWillFinish.TotalSeconds - _timing.CurTime.TotalSeconds)) / _songDuration.TotalSeconds);

            return;
        }

        if (_jukeboxComp.StoppedTime == null)
        {
            Logger.ErrorS("jukebox", $"Jukebox {_jukeboxComp} is stopped but has no StoppedTime!");

            return;
        }

        RunTimeBar.Value = (float) ((float)
            (_songDuration.TotalSeconds - (_timeWillFinish.TotalSeconds - _timeStopped.TotalSeconds)) / _songDuration.TotalSeconds);
    }

    private void PopulateSongs()
    {
        Logger.Error("Populating songs!");

        SongPickerBox.RemoveAllChildren();

        var songsToAdd = _jukeboxComp.Songs;

        songsToAdd.Sort();

        if (_jukeboxComp.Emagged)
            songsToAdd.AddRange(_jukeboxComp.EmaggedSongs.OrderBy(song => song).ToList());

        foreach (var trackId in songsToAdd)
        {
            Logger.Error($"Adding {trackId}!");

            if (!_prototype.TryIndex<JukeboxTrackPrototype>(trackId, out var track))
            {
                Logger.Error($"No JukeboxTrackPrototype found for {trackId}!");

                continue;
            }

            var newButton = new Button
            {
                Text = track.Name
            };

            SongPickerBox.AddChild(newButton);

            newButton.OnPressed += _ => OnSongSelected?.Invoke(trackId);
        }
    }

    private void PopulateQueue()
    {
        NextSongsBox.RemoveAllChildren();

        if (_jukeboxComp.NextUp.Count == 0)
        {
            NextSongsBox.AddChild(new Label
            {
                Text = Loc.GetString("jukebox-ui-queue-empty")
            });

            return;
        }

        foreach (var trackId in _jukeboxComp.NextUp)
        {
            if (!_prototype.TryIndex<JukeboxTrackPrototype>(trackId, out var track))
            {
                Logger.Error($"No JukeboxTrackPrototype found for {trackId}!");

                continue;
            }

            var newLabel = new Label
            {
                Text = track.Name
            };

            NextSongsBox.AddChild(newLabel);
        }
    }

    public void UpdateState(bool repopulateSongs = false)
    {
        if (repopulateSongs)
            PopulateSongs();

        PopulateQueue();

        if (_jukeboxComp.CurrentlyPlayingTrack == null)
        {
            SongName.Text = Loc.GetString("jukebox-ui-current-empty");
            SongIcon.TexturePath = _jukeboxComp.DefaultSongArtPath;

            SkipButton.Disabled = true;
            PlayButton.Disabled = true;

            _timeWillFinish = TimeSpan.Zero;
            _timeStopped = TimeSpan.Zero;

            PlayButton.TexturePath = "/Textures/SimpleStation14/Interface/MediaControls/play.png";

            return;
        }

        _timeWillFinish = _jukeboxComp.FinishPlayingTime!.Value;

        _timeStopped = _jukeboxComp.StoppedTime ?? TimeSpan.Zero;

        _songDuration = _jukeboxComp.CurrentlyPlayingTrack.Duration;

        var track = _jukeboxComp.CurrentlyPlayingTrack;

        SongName.Text = track.Name;
        SongIcon.TexturePath = track.ArtPath;

        SkipButton.Disabled = false;
        PlayButton.Disabled = false;

        if (_jukeboxComp.Paused)
            PlayButton.TexturePath = "/Textures/SimpleStation14/Interface/MediaControls/play.png";
        else
            PlayButton.TexturePath = "/Textures/SimpleStation14/Interface/MediaControls/pause.png";
    }
}
