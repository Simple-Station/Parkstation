using Content.Shared.SimpleStation14.Jukebox;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Shared.Prototypes;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Timing;
using FancyWindow = Content.Client.UserInterface.Controls.FancyWindow;
using Content.Shared.SimpleStation14.Prototypes;
using System.Linq;
using Content.Client.Resources;
using Content.Client.Stylesheets;
using Robust.Client.Graphics;
using Robust.Client.ResourceManagement;

namespace Content.Client.SimpleStation14.Jukebox.Ui;

[GenerateTypedNameReferences]
public sealed partial class JukeboxWindow : FancyWindow
{
    [Dependency] private readonly IGameTiming _timing = default!;
    [Dependency] private readonly IPrototypeManager _prototype = default!;
    [Dependency] private readonly IResourceCache _resourceCache = default!;

    private readonly ISawmill _log = default!;

    private readonly JukeboxComponent _jukeboxComp;

    private TimeSpan _timeWillFinish = TimeSpan.Zero;

    private TimeSpan _timeStopped = TimeSpan.Zero;

    private TimeSpan _songDuration = TimeSpan.Zero;

    public Action? OnPlayButtonPressed;

    public Action? OnSkipButtonPressed;

    public Action<string>? OnSongSelected;


    public JukeboxWindow(JukeboxComponent jukeboxComp, ISawmill log)
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        _log = log;
        _jukeboxComp = jukeboxComp;

        PlayButton.OnPressed += _ => OnPlayButtonPressed?.Invoke();
        SkipButton.OnPressed += _ => OnSkipButtonPressed?.Invoke();

        SerialTitle.SetMessage(Loc.GetString("jukebox-ui-serial-title"));
        SerialNumber.Text = jukeboxComp.SerialNumber;
        SkipButton.TexturePath = jukeboxComp.UiButtonSkip;

        // Sets up the custom colours of the ui.
        BG_1.PanelOverride = new StyleBoxFlat { BackgroundColor = jukeboxComp.UiColorBG };
        Panel_1.PanelOverride = new StyleBoxFlat { BackgroundColor = jukeboxComp.UiColorPanel };
        Panel_2.PanelOverride = new StyleBoxFlat { BackgroundColor = jukeboxComp.UiColorPanel };
        Panel_3.PanelOverride = new StyleBoxFlat { BackgroundColor = jukeboxComp.UiColorPanel };
        // Accent_1.PanelOverride = new StyleBoxFlat { BackgroundColor = jukeboxComp.JukeboxUiColorAccent };
        // Accent_2.PanelOverride = new StyleBoxFlat { BackgroundColor = jukeboxComp.JukeboxUiColorAccent };
        Accent_3.PanelOverride = new StyleBoxFlat { BackgroundColor = jukeboxComp.UiColorAccent };
        Accent_4.PanelOverride = new StyleBoxFlat { BackgroundColor = jukeboxComp.UiColorAccent };

        // Sets up all the fonts.
        SongName.FontOverride = _resourceCache.GetFont("/Fonts/NotoSans/NotoSans-Regular.ttf", 18);
        SongsLabel.FontOverride = _resourceCache.GetFont("/Fonts/NotoSans/NotoSans-Regular.ttf", 22);
        // SerialTitle.FontOverride = _resourceCache.GetFont("/Fonts/NotoSans/NotoSans-Regular.ttf", 16);
        SerialHeader.FontOverride = _resourceCache.GetFont("/Fonts/NotoSans/NotoSans-Regular.ttf", 28);
        SerialNumber.FontOverride = _resourceCache.GetFont("/Fonts/NotoSans/NotoSans-Regular.ttf", 16);

        if (!jukeboxComp.DecorativeUi) // Hides the decorative portion of the UI if the Jukebox doesn't have it.
        {
            DecorativeBox.Visible = false;
            SetHeight -= DecorativeBox.MinSize.Y;
        }


        foreach (var control in CoinLabels.Children) // Death did this and I would like to not acknowledge it.
        {
            if (control is Label label)
            {
                label.FontOverride = _resourceCache.GetFont("/Fonts/NotoSans/NotoSans-Regular.ttf", 16);
                label.FontColorOverride = Color.FromHex("#A5762F");
                label.HorizontalAlignment = HAlignment.Center;
                label.HorizontalExpand = false;
                label.VerticalAlignment = VAlignment.Center;
                label.HorizontalExpand = false;
            }
        }

        UpdateState(true);
    }

    // Updates the progress bar of the song every frame, matching to the duration, if a song is actually playing.
    protected override void FrameUpdate(FrameEventArgs args)
    {
        base.FrameUpdate(args);

        if (_jukeboxComp.CurrentlyPlayingTrack == null)
        {
            RunTimeBar.Value = 0f;

            return;
        }

        if (_jukeboxComp.Playing)
        {
            RunTimeBar.Value = (float) ((float)
                (_songDuration.TotalSeconds - (_timeWillFinish.TotalSeconds - _timing.CurTime.TotalSeconds)) / _songDuration.TotalSeconds);

            return;
        }

        if (_jukeboxComp.StoppedTime == null)
        {
            _log.Error(Loc.GetString("jukebox-error-no-stopped-time"), _jukeboxComp);

            return;
        }

        RunTimeBar.Value = (float) ((float)
            (_songDuration.TotalSeconds - (_timeWillFinish.TotalSeconds - _timeStopped.TotalSeconds)) / _songDuration.TotalSeconds);
    }

    private void PopulateSongs()
    {
        SongPickerBox.RemoveAllChildren();

        if (_jukeboxComp.Emagged) // We want the emagged songs on top.
            foreach (var trackId in _jukeboxComp.EmaggedSongs.OrderBy(song => song).ToList())
                GenerateSongButton(trackId, true);

        foreach (var trackId in _jukeboxComp.Songs.OrderBy(song => song).ToList())
            GenerateSongButton(trackId, false);
    }

    private void GenerateSongButton(string trackId, bool illegal)
    {
        if (!_prototype.TryIndex<JukeboxTrackPrototype>(trackId, out var track))
        {
            _log.Error(Loc.GetString("jukebox-error-no-prototype"), trackId);
            return;
        }

        var newButton = new Button
        {
            Text = track.Name,
            TextAlign = Label.AlignMode.Left,
            ClipText = true,
            RectClipContent = true,
            MaxWidth = 180f,
            Margin = new Thickness(0, 0, 0, 4),
        };

        newButton.StyleClasses.Add(StyleBase.ButtonOpenLeft);
        if (illegal)
            newButton.StyleClasses.Add(StyleBase.ButtonCaution);
        newButton.OnPressed += _ => OnSongSelected?.Invoke(track.ID);

        SongPickerBox.AddChild(newButton);
    }

    private void PopulateQueue()
    {
        NextSongsBox.RemoveAllChildren();

        if (_jukeboxComp.NextUp.Count == 0)
        {
            NextSongsBox.AddChild(new Label
            {
                Text = Loc.GetString("jukebox-ui-queue-empty"),
            });

            return;
        }

        foreach (var trackId in _jukeboxComp.NextUp)
        {
            if (!_prototype.TryIndex<JukeboxTrackPrototype>(trackId, out var track))
            {
                _log.Error(Loc.GetString("jukebox-error-no-prototype"), trackId);

                continue;
            }

            var newLabel = new Label
            {
                Text = track.Name,
                HorizontalAlignment = HAlignment.Center,
                HorizontalExpand = false,
                Margin = new Thickness(0, 2, 0, 2),
            };

            NextSongsBox.AddChild(newLabel);
        }
    }

    public void UpdateState(bool repopulateSongs = false)
    {
        if (repopulateSongs)
            PopulateSongs();

        PopulateQueue();

        if (_jukeboxComp.CurrentlyPlayingTrack == null || !_prototype.TryIndex<JukeboxTrackPrototype>(_jukeboxComp.CurrentlyPlayingTrack, out var track))
        {
            SongName.Text = Loc.GetString("jukebox-ui-current-empty");
            SongIcon.TexturePath = _jukeboxComp.DefaultSongArtPath;

            SkipButton.Disabled = true;
            PlayButton.Disabled = true;

            _timeWillFinish = TimeSpan.Zero;
            _timeStopped = TimeSpan.Zero;

            PlayButton.TexturePath = _jukeboxComp.UiButtonPlay;

            PlayButton.Disabled = true;
            SkipButton.Disabled = true;

            return;
        }

        _timeWillFinish = _jukeboxComp.FinishPlayingTime!.Value;

        _timeStopped = _jukeboxComp.StoppedTime ?? TimeSpan.Zero;

        _songDuration = track.Duration;

        SongName.Text = track.Name;
        SongIcon.TexturePath = track.ArtPath ?? _jukeboxComp.DefaultSongArtPath;

        SkipButton.Disabled = false;
        PlayButton.Disabled = false;

        PlayButton.TexturePath = _jukeboxComp.Paused ? _jukeboxComp.UiButtonPlay : _jukeboxComp.UiButtonPause;

        PlayButton.Disabled = false;
        SkipButton.Disabled = false;
    }
}
