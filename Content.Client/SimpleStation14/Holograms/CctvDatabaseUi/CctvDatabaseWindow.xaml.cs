using Content.Client.UserInterface.Controls;
using Content.Shared.SimpleStation14.Holograms;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Shared.Timing;

namespace Content.Client.SimpleStation14.Holograms.CctvDatabaseUi;

[GenerateTypedNameReferences]
public sealed partial class CctvDatabaseWindow : FancyWindow
{
    [Dependency] private readonly IGameTiming _timing = default!;

    public Action<int>? PrintRequested;

    private const string IdleMessage = "cctv-database-user-interface-message-idle";
    private const string PrintingMessage = "cctv-database-user-interface-message-printing";

    private TimeSpan? _printTime;

    public void UpdateState(CctvDatabaseState state)
    {
        var entries = state.CrewManifest;
        _printTime = state.FinishedPrintingTime;

        TargetList.RemoveAllChildren();

        var disabled = state.FinishedPrintingTime != null;
        for (var i = 0; i < entries.Count; i++)
        {
            var label = new Label
            {
                Text = entries[i],
            };

            var button = new Button
            {
                Text = "Print",
                Disabled = disabled,
            };

            var index = i;
            button.OnPressed += _ => PrintRequested?.Invoke(index);

            TargetList.AddChild(label);
            TargetList.AddChild(button);
        }

        MessageLabel.Text = state.FinishedPrintingTime.ToString() ?? Loc.GetString(IdleMessage);
    }

    protected override void FrameUpdate(FrameEventArgs args)
    {
        base.FrameUpdate(args);

        if (_printTime == null)
            return;

        var timeLeft = _printTime.Value - _timing.CurTime;
        MessageLabel.Text = timeLeft > TimeSpan.Zero
            ? $"{Loc.GetString(PrintingMessage)}: {timeLeft.TotalSeconds:0.0}"
            : Loc.GetString(IdleMessage);
    }
}
