using System.Linq;
using System.Net.Mime;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.XAML;
using Content.Shared.SimpleStation14.StationAI;
using Robust.Client.UserInterface.Controls;
using Content.Client.UserInterface.Controls;
using Content.Shared.SimpleStation14.StationAI.Events;
using System.Numerics;
using Robust.Shared.Map;
using Robust.Client.GameObjects;
using Robust.Client.UserInterface;
using Robust.Shared.Input;

namespace Content.Client.SimpleStation14.StationAI.UI;

[GenerateTypedNameReferences]
public sealed partial class AICameraList : FancyWindow
{
    // [Dependency] private readonly SharedTransformSystem _transform = default!;

    private List<AIBoundUserInterfaceState.CameraData> _cameras = new();
    public event Action? TryUpdateCameraList;
    public event Action<EntityCoordinates>? PositionSelected;

    public AICameraList()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        SearchBar.OnTextChanged += (_) => FillCameraList(SearchBar.Text);
        Refresh.OnPressed += (_) => UpdateCameraList();
        CameraList.OnItemSelected += ItemSelected;

        StationMap.MapPosRightClicked += OnMapPosClicked;
    }

    public void SetGrid(EntityUid owner)
    {
        if (IoCManager.Resolve<IEntityManager>().System<SharedTransformSystem>().TryGetMapOrGridCoordinates(owner, out var coords))
            StationMap.MapUid = coords.Value.EntityId;
    }

    private void ItemSelected(ItemList.ItemListSelectedEventArgs obj)
    {
        var meta = obj.ItemList[obj.ItemIndex].Metadata;
        if (meta == null ||
            meta is not EntityCoordinates pos)
            return;

        PositionSelected?.Invoke(pos);
    }

    private void FillCameraList(string? filter = null)
    {
        CameraList.Clear();

        if (_cameras.Count == 0)
        {
            Text.Text = Loc.GetString("ai-warp-menu-no-cameras");
            return;
        }

        Text.Text = Loc.GetString("ai-warp-menu-select-camera");

        foreach (var cameraData in _cameras)
        {
            StationMap.TrackedCoordinates.TryAdd(cameraData.Coords, (true, cameraData.Active ? Color.Green : Color.Red));

            var item = new ItemList.Item(CameraList)
            {
                Text = cameraData.Name,
                Metadata = cameraData.Coords,
                Icon = Theme.ResolveTexture("/Textures/Interface/whitedot.png"),
                IconModulate = cameraData.Active ? Color.Green : Color.Red,
                Selectable = cameraData.Active,

            };

            CameraList.Add(item);
        }
    }

    private void OnMapPosClicked(EntityCoordinates coords)
    {
        PositionSelected?.Invoke(coords);
    }

    public void UpdateCameraList(List<AIBoundUserInterfaceState.CameraData>? cameras = null)
    {
        if (cameras == null)
        {
            TryUpdateCameraList?.Invoke();
            return;
        }

        _cameras = cameras;
        FillCameraList();
    }
}
