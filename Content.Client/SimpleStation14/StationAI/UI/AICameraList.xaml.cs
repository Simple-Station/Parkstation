using Robust.Client.UserInterface.CustomControls;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.XAML;
using Content.Shared.SimpleStation14.AI;
using Robust.Client.UserInterface.Controls;
using Robust.Shared.GameObjects;

namespace Content.Client.SimpleStation14.AI.UI
{
    [GenerateTypedNameReferences]
    public sealed partial class AICameraList : DefaultWindow
    {
        private AICameraComponent? _selectedCamera;

        public AICameraList()
        {
            RobustXamlLoader.Load(this);

            SubnetList.OnItemSelected += ItemSelected;
            SubnetList.OnItemDeselected += ItemDeselected;
            SearchBar.OnTextChanged += (_) => UpdateCameraList(SearchBar.Text);

            UpdateCameraList();
        }
        private void ItemSelected(ItemList.ItemListSelectedEventArgs obj)
        {
            Logger.Debug("Click");
            _selectedCamera = (AICameraComponent) obj.ItemList[obj.ItemIndex].Metadata!;
            UpdateCameraList();
        }

        private void ItemDeselected(ItemList.ItemListDeselectedEventArgs obj)
        {
            Logger.Debug("Unclick");
            _selectedCamera = null;
            UpdateCameraList();
        }

        public void UpdateCameraList(string? filter = null)
        {
            Logger.Debug("Update");
            SubnetList.Clear();

            var _entityManager = IoCManager.Resolve<IEntityManager>();
            var cameras = _entityManager.EntityQuery<AICameraComponent>();

            if (cameras == null)
            {
                Text.Text = "No cameras found.";
                return;
            }

            Text.Text = "";

            foreach (var camera in cameras)
            {
                Logger.Debug(camera.CameraName);
                if (camera.Enabled == false) continue;

                if (!string.IsNullOrEmpty(filter) && !camera.CameraName.ToLowerInvariant().Contains(filter.Trim().ToLowerInvariant()))
                {
                    continue;
                }

                ItemList.Item cameraItem = new(SubnetList)
                {
                    Metadata = camera,
                    Text = camera.CameraName
                };

                SubnetList.Add(cameraItem);
            }
        }
    }
}
