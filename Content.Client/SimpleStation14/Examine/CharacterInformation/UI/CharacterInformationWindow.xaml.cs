using System.Linq;
using System.Numerics;
using Content.Client.Message;
using Content.Client.UserInterface.Controls;
using Content.Shared.Humanoid;
using Content.Shared.Inventory;
using Microsoft.CodeAnalysis;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Containers;
using Robust.Shared.Map;

namespace Content.Client.SimpleStation14.Examine.CharacterInformation.UI;

[GenerateTypedNameReferences]
public sealed partial class CharacterInformationWindow : FancyWindow
{
    private readonly IEntityManager _entity;
    private readonly InventorySystem _inventory;

    private EntityUid _dummy = EntityUid.Invalid;

    // ReSharper disable once InconsistentNaming
    private FancyWindow _rootWindow => RootWindow;
    // ReSharper disable once InconsistentNaming
    private GridContainer _sprites => SpriteContainer;
    // ReSharper disable once InconsistentNaming
    private RichTextLabel _name => Name;
    // ReSharper disable once InconsistentNaming
    private RichTextLabel _job => Job;
    // ReSharper disable once InconsistentNaming
    private PanelContainer _separator => Separator;
    // ReSharper disable once InconsistentNaming
    private ScrollContainer _flavorTextScroll => FlavorTextScroll;
    // ReSharper disable once InconsistentNaming
    private RichTextLabel _flavor => FlavorText;

    public CharacterInformationWindow()
    {
        RobustXamlLoader.Load(this);

        _entity = IoCManager.Resolve<IEntityManager>();
        _inventory = EntitySystem.Get<InventorySystem>();

        ResetUi();
    }


    /// <summary>
    ///     Placeholder entries
    /// </summary>
    private void ResetUi()
    {
        _entity.DeleteEntity(_dummy);
        _sprites.RemoveAllChildren();

        var unknown = Loc.GetString("generic-unknown");
        // Capitalize the first letter of each word (Title Case)
        unknown = string.Join(" ", unknown.Split(' ').Select(s => char.ToUpper(s[0]) + s[1..]));

        _name.SetMarkup(unknown);
        _job.SetMarkup(unknown);

        _flavor.SetMarkup("Placeholder flavor text.");
    }

    /// <summary>
    ///     Updates the UI to show all relevant information about the entity
    /// </summary>
    /// <param name="examined">The entity to become informed about</param>
    /// <param name="name">The name of the examined entity, taken from their ID</param>
    /// <param name="job">The job of the examined entity, taken from their ID</param>
    /// <param name="flavorText">The flavor text of the examined entity</param>
    public void UpdateUi(EntityUid examined, string? name = null, string? job = null, string? flavorText = null)
    {
        ResetUi();

        // Fill in the omnidirectional sprite views
        if (_entity.TryGetComponent<SpriteComponent>(examined, out var sprite))
            FillSprites(sprite, examined);

        // Fill in the name and job
        if (!string.IsNullOrEmpty(name))
            _name.SetMarkup(name);
        if (!string.IsNullOrEmpty(job))
            _job.SetMarkup(job);

        // Fill in the flavor text
        if (!string.IsNullOrEmpty(flavorText))
        {
            _flavor.SetMessage(flavorText);
            _rootWindow.MinSize = new Vector2(675, 384);
            _rootWindow.SetSize = new Vector2(675, 384);
            _separator.Visible = true;
            _flavorTextScroll.Visible = true;
        }
        else
        {
            _rootWindow.MinSize = new Vector2(292, 384);
            _rootWindow.SetSize = new Vector2(292, 384);
            _separator.Visible = false;
            _flavorTextScroll.Visible = false;
        }
    }


    /// <summary>
    ///     Fills the sprite views with the sprite from the sprite component
    /// </summary>
    /// <param name="sprite">Sprite component to use</param>
    /// <param name="entity">The entity <paramref name="sprite"/> belongs to</param>
    private void FillSprites(SpriteComponent sprite, EntityUid entity)
    {
        // This all should "freeze" the sprite views
        // Spawn a dummy entity to get a copy of the sprite component from
        _dummy = _entity.SpawnEntity(_entity.GetComponent<MetaDataComponent>(entity).EntityPrototype!.ID, MapCoordinates.Nullspace);

        // Ensures the dummy has the same sex as the entity so masks are applied correctly
        if (_entity.TryGetComponent(entity, out HumanoidAppearanceComponent? humanoidAppearance))
        {
            var newHumanoidAppearance = _entity.EnsureComponent<HumanoidAppearanceComponent>(_dummy);
            newHumanoidAppearance.Sex = humanoidAppearance.Sex;
        }

        // Spawn and equip a fake jumpsuit (it won't be shown) so the appearance system doesn't destroy reality when applying masks
        var clothing = _entity.SpawnEntity("ClothingUniformJumpsuitColorGrey", MapCoordinates.Nullspace);
        _inventory.TryEquip(_dummy, _dummy, clothing, "jumpsuit", true, true);

        // Copy the sprite component from the original entity to the dummy
        var newSprite = _entity.EnsureComponent<SpriteComponent>(_dummy);
        newSprite.CopyFrom(sprite);


        // Create the SpriteViews
        // From lists because redefining everything except direction and margin is annoying and hard to edit in the future
        var directions = new List<Direction> {Direction.South, Direction.North, Direction.West, Direction.East};
        var margins = new List<Thickness>
        {
            new(0, 0, 8, 8), // South
            new(8, 0, 0, 8), // North
            new(0, 8, 8, 0), // West
            new(8, 8, 0, 0), // East
        };

        for (var i = 0; i < directions.Count; i++)
        {
            _sprites.AddChild(new SpriteView
            {
                Sprite = newSprite,
                Scale = new Vector2(4, 4),
                Stretch = SpriteView.StretchMode.None,
                MaxSize = new Vector2(128, 128),
                OverrideDirection = directions[i],
                Margin = margins[i]
            });
        }
    }
}
